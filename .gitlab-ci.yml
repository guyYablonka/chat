# Auto DevOps
# This CI/CD configuration provides a standard pipeline for
# * building a Docker image (using a buildpack if necessary),
# * storing the image in the container registry,
# * running tests from a buildpack,
# * running code quality analysis,
# * creating a review app for each topic branch,
# * and continuous deployment to production
#
# Test jobs may be disabled by setting environment variables:
# * test: TEST_DISABLED
# * code_quality: CODE_QUALITY_DISABLED
# * license_management: LICENSE_MANAGEMENT_DISABLED
# * performance: PERFORMANCE_DISABLED
# * sast: SAST_DISABLED
# * dependency_scanning: DEPENDENCY_SCANNING_DISABLED
# * container_scanning: CONTAINER_SCANNING_DISABLED
# * dast: DAST_DISABLED
# * review: REVIEW_DISABLED
# * stop_review: REVIEW_DISABLED
#
# In order to deploy, you must have a Kubernetes cluster configured either
# via a project integration, or via group/project variables.
# KUBE_INGRESS_BASE_DOMAIN must also be set as a variable at the group or project
# level, or manually added below.
#
# Continuous deployment to production is enabled by default.
# If you want to deploy to staging first, set STAGING_ENABLED environment variable.
# If you want to enable incremental rollout, either manual or time based,
# set INCREMENTAL_ROLLOUT_MODE environment variable to "manual" or "timed".
# If you want to use canary deployments, set CANARY_ENABLED environment variable.
#
# If Auto DevOps fails to detect the proper buildpack, or if you want to
# specify a custom buildpack, set a project variable `BUILDPACK_URL` to the
# repository URL of the buildpack.
# e.g. BUILDPACK_URL=https://github.com/heroku/heroku-buildpack-ruby.git#v142
# If you need multiple buildpacks, add a file to your project called
# `.buildpacks` that contains the URLs, one on each line, in order.
# Note: Auto CI does not work with multiple buildpacks yet

image: alpine:latest

variables:
    # KUBE_INGRESS_BASE_DOMAIN is the application deployment domain and should be set as a variable at the group or project level.
    KUBE_INGRESS_BASE_DOMAIN: 40.114.31.51.nip.io
    KUBE_NAMESPACE: rocketchat-9910731

    KUBERNETES_VERSION: 1.21.2
    HELM_VERSION: 3.7.1

    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ''

stages:
    - unitest
    - meteorbundle
    - build
    - production

unitest:
    stage: unitest
    image: lizag21/dind-ubuntu-meteor-3.11:1.1
    script:
        - npm install
        - npm run unitest:ci
    only:
        - develop
        - /^release/.*$/
    tags:
        - docker

meteorbundle:
    stage: meteorbundle
    image: lizag21/dind-ubuntu-meteor-3.11:1.1
    services:
        - docker:dind
    script:
        - echo "KUBECONFIG $KUBECONFIG CI_ENVIRONMENT_SLUG $CI_ENVIRONMENT_SLUG KUBE_INGRESS_BASE_DOMAIN $KUBE_INGRESS_BASE_DOMAIN environment url $CI_ENVIRONMENT_URL MONGO_URL $MONGO_URL"
        - meteor npm install --production --unsafe-perm
        - meteor npm install --save fibers
        - set +e
        - meteor add rocketchat:lib
        - set -e
        - 'sed -i -e "s/rejectUnauthorized: *true/rejectUnauthorized: false/g" ./node_modules/aws-sdk/lib/http/node.js'
        - mkdir -p build
        - METEOR_ALLOW_SUPERUSER=true meteor build --allow-superuser --server-only --architecture os.linux.x86_64 build/
    artifacts:
        paths:
            - build/
    only:
        - develop
        - /^release/.*$/
    tags:
        - docker

build:
    stage: build
    image: lizag21/dind-ubuntu-meteor-3.11:1.2
    services:
        - docker:18.09.7-dind
    script:
        - setup_docker
        - build
        - cleanup
    dependencies:
        - meteorbundle
    only:
        - develop
        - /^release/.*$/
    tags:
        - docker

.production: &production_template
    stage: production
    image: alpine:latest
    script:
        - check_kube_domain
        - install_dependencies
        - ensure_namespace
        - create_secret
        - deploy
        - persist_environment_url
    environment:
        name: prod
        url: http://$CI_PROJECT_PATH_SLUG.$KUBE_INGRESS_BASE_DOMAIN
    artifacts:
        paths: [environment_url.txt]
    tags:
        - docker

production:
    <<: *production_template
    only:
        refs:
            - develop
            - /^release/.*$/
    tags:
        - docker

production_manual:
    <<: *production_template
    when: manual
    allow_failure: true
    only:
        refs:
            - develop

.auto_devops: &auto_devops |
    # Auto DevOps variables and functions
    [[ "$TRACE" ]] && set -x
    export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
    export CI_APPLICATION_TAG=$CI_COMMIT_SHA
    export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}
    export TILLER_NAMESPACE=$KUBE_NAMESPACE
    # Extract "MAJOR.MINOR" from CI_SERVER_VERSION and generate "MAJOR-MINOR-stable" for Security Products
    export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')

    function registry_login() {
      if [[ -n "$CI_REGISTRY_USER" ]]; then
        echo "Logging to GitLab Container Registry with CI credentials... $CI_REGISTRY_USER $CI_REGISTRY_PASSWORD $CI_REGISTRY"
        docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
        echo ""
      fi
    }

    function get_replicas() {
      track="${1:-stable}"
      percentage="${2:-100}"

      env_track=$( echo $track | tr -s  '[:lower:]'  '[:upper:]' )
      env_slug=$( echo ${CI_ENVIRONMENT_SLUG//-/_} | tr -s  '[:lower:]'  '[:upper:]' )

      if [[ "$track" == "stable" ]] || [[ "$track" == "rollout" ]]; then
        # for stable track get number of replicas from `PRODUCTION_REPLICAS`
        eval new_replicas=\$${env_slug}_REPLICAS
        if [[ -z "$new_replicas" ]]; then
          new_replicas=$REPLICAS
        fi
      else
        # for all tracks get number of replicas from `CANARY_PRODUCTION_REPLICAS`
        eval new_replicas=\$${env_track}_${env_slug}_REPLICAS
        if [[ -z "$new_replicas" ]]; then
          eval new_replicas=\${env_track}_REPLICAS
        fi
      fi

      replicas="${new_replicas:-1}"
      replicas="$(($replicas * $percentage / 100))"

      # always return at least one replicas
      if [[ $replicas -gt 0 ]]; then
        echo "$replicas"
      else
        echo 1
      fi
    }

    function deploy() {
      track="${1-stable}"
      percentage="${2:-100}"
      name="$CI_ENVIRONMENT_SLUG"

      replicas="1"
      service_enabled="true"

      # if track is different than stable,
      # re-use all attached resources
      if [[ "$track" != "stable" ]]; then
        name="$name-$track"
      fi

      replicas=$(get_replicas "$track" "$percentage")

      if [[ "$CI_PROJECT_VISIBILITY" != "public" ]]; then
        secret_name='gitlab-registry'
      else
        secret_name=''
      fi

      echo "Deploying new release..."
      echo "CI_PROJECT_VISIBILITY $CI_PROJECT_VISIBILITY"
      echo "service_enabled $service_enabled"
      echo "CI_ENVIRONMENT_SLUG $CI_ENVIRONMENT_SLUG"
      echo "CI_APPLICATION_REPOSITORY $CI_APPLICATION_REPOSITORY"
      echo "CI_APPLICATION_TAG $CI_APPLICATION_TAG"
      echo "secret_name $secret_name"
      echo "track $track"
      echo "CI_ENVIRONMENT_URL $CI_ENVIRONMENT_URL"
      echo "replicas $replicas"
      echo "MONGO_URL $MONGO_URL"
      echo "MONGO_OPLOG_URL $MONGO_OPLOG_URL"
      echo "KUBE_NAMESPACE $KUBE_NAMESPACE"
      echo "name $name"

      chmod 700 /builds/rockettar/rocketchat-3.11.1.tmp/KUBECONFIG
      helm inspect values rocketchat

      helm upgrade --install \
        --wait \
        --set service.enabled="$service_enabled" \
        --set releaseOverride="$CI_ENVIRONMENT_SLUG" \
        --set image.repository="$CI_APPLICATION_REPOSITORY" \
        --set image.tag="$CI_APPLICATION_TAG" \
        --set image.secrets[0].name="$secret_name" \
        --set application.track="$track" \
        --set service.url="$CI_ENVIRONMENT_URL" \
        --set replicaCount="$replicas" \
        --set mongo.mongoUrl="$MONGO_URL" \
        --set mongo.mongoOplogUrl="$MONGO_OPLOG_URL" \
        --namespace="$KUBE_NAMESPACE" \
        "$name" \
        rocketchat/

      # name is release name
      # rocketchat is the name of the chart you want to install

      helm get values "$name" -n "$KUBE_NAMESPACE"

      helm get manifest "$name"  -n "$KUBE_NAMESPACE"

      kubectl rollout status -n "$KUBE_NAMESPACE" -w "deployment/$name"
    }

    function install_dependencies() {
      apk add -U openssl curl tar gzip bash ca-certificates git
      curl -L -o /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
      curl -L -O https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.28-r0/glibc-2.28-r0.apk
      apk add glibc-2.28-r0.apk
      rm glibc-2.28-r0.apk

      curl "https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz" | tar zx
      mv linux-amd64/helm /usr/bin/
      helm version --client

      curl -L -o /usr/bin/kubectl "https://storage.googleapis.com/kubernetes-release/release/v${KUBERNETES_VERSION}/bin/linux/amd64/kubectl"
      chmod +x /usr/bin/kubectl
      kubectl version --client
    }

    function setup_docker() {
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
    }

    function ensure_namespace() {
      kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
    }

    function check_kube_domain() {
      if [ -z ${KUBE_INGRESS_BASE_DOMAIN+x} ]; then
        echo "In order to deploy or use Review Apps, KUBE_INGRESS_BASE_DOMAIN variable must be set"
        echo "You can do it in Auto DevOps project settings or defining a variable at group or project level"
        echo "You can also manually add it in .gitlab-ci.yml"
        false
      else
        true
      fi
    }

    function build() {
      registry_login

      echo "Building Dockerfile-based application..."
      docker build \
      --file Dockerfile \
      -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" ./build

      echo "Pushing to GitLab Container Registry..."
      echo "Pushing" "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
      docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
      echo "Pushing" "$CI_APPLICATION_REPOSITORY:$CI_COMMIT_REF_SLUG"
      docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$CI_APPLICATION_REPOSITORY:$CI_COMMIT_REF_SLUG"
      docker push "$CI_APPLICATION_REPOSITORY:$CI_COMMIT_REF_SLUG"
      echo ""
    }

    function create_secret() {
      echo "Create secret..."
      if [[ "$CI_PROJECT_VISIBILITY" == "public" ]]; then
        return
      fi

      kubectl create secret -n "$KUBE_NAMESPACE" \
        docker-registry gitlab-registry \
        --docker-server="$CI_REGISTRY" \
        --docker-username="${CI_DEPLOY_USER:-$CI_REGISTRY_USER}" \
        --docker-password="${CI_DEPLOY_PASSWORD:-$CI_REGISTRY_PASSWORD}" \
        --docker-email="$GITLAB_USER_EMAIL" \
        -o yaml --dry-run | kubectl replace -n "$KUBE_NAMESPACE" --force -f -
    }

    function persist_environment_url() {
        echo $CI_ENVIRONMENT_URL > environment_url.txt
    }

    function delete() {
      track="${1-stable}"
      name="$CI_ENVIRONMENT_SLUG"

      if [[ "$track" != "stable" ]]; then
        name="$name-$track"
      fi

      if [[ -n "$(helm ls -q "^$name$")" ]]; then
        helm delete --purge "$name"
      fi
    }

    function cleanup() {
      docker system prune -af
    }

before_script:
    - *auto_devops
